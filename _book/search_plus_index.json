{"./":{"url":"./","title":"前言","keywords":"","body":"我描述 Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Git/忽略已经被git管理的文件.html":{"url":"source/Git/忽略已经被git管理的文件.html","title":"忽略已经被git管理的文件","keywords":"","body":".gitignore规则和忽略已经被git管理的文件 文件 .gitignore 的格式规范如下： 所有空行或者以 ＃ 开头的行都会被 Git 忽略。 可以使用标准的 glob 模式匹配。 匹配模式可以以（/）开头防止递归。 匹配模式可以以（/）结尾指定目录。 惊叹号（!）取反。表示不忽略 所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9]这里写代码片 表示匹配所有 0 到 9 的数字）。 使用两个星号（*) 表示匹配任意中间目录，比如a/**/z 可以匹配 a/z, a/b/z 或 a/b/c/z等。 我们再看一个 .gitignore 文件的例子： # no .a files *.a # but do track lib.a, even though you're ignoring .a files above !lib.a # only ignore the TODO file in the current directory, not subdir/TODO /TODO # ignore all files in the build/ directory build/ # ignore doc/notes.txt, but not doc/server/arch.txt doc/*.txt # ignore all .pdf files in the doc/ directory doc/**/*.pdf 如何忽略已经被git管理的文件 .gitignore 文件 一般再项目建立的时候就应该写好，这样才能有效，但如果是已经被git管理的文件，后边发现不想再跟踪了，直接再.gitignore添加此文件 是不会生效的 。有效的操作如下； #1.git rm -r --cached 此命令的含义是untrack 指定的fileA，或者使用 --cached . 表示将untrack 工作目录下的所有文件。 #2.修改.gitignore 文件 将fileA 添加到忽略文件中 #3.提交 最后一步就是将修改提交。 git add . git commit -m \"ignore fileA\" git push Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Git/全局设置用户名邮箱配置.html":{"url":"source/Git/全局设置用户名邮箱配置.html","title":"全局设置用户名邮箱配置","keywords":"","body":"[git命令：全局设置用户名邮箱配置] 1、查看git配置信息 git config --list 2、查看git用户名 git config user.name 3、查看邮箱配置 git config user.email 4、全局配置用户名 git config --global user.name \"nameVal\" 5、全局配置邮箱 git config --global user.email \"eamil@qq.com\" git生成并添加SSH key ① cd ~/.ssh/ 【如果没有对应的文件夹，则执行 mkdir ./.ssh】 ② git config --global user.name \"xb12369\" ③ git config --global user.email \"1234@qq.com\" ④ ssh-keygen -t rsa -C \"1234@qq.com\" 4、找到C:\\Users\\xb12369.ssh 目录，里面有两个文件：id_rsa和id_rsa.pub 5、配置ssh【这里是id_rsa.pub里面的内容啊】 Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/IDEA/IDEA模板设置.html":{"url":"source/IDEA/IDEA模板设置.html","title":"IDEA模板设置","keywords":"","body":"IDEA类和方法注释模板设置 这里设置的注释模板采用Eclipse的格式，下面先贴出Eclipse的注释模板，我们就按照这种格式来设置： 类注释模板： /** * @author 4005517 * @ClassName xxxController * @Description TODO * @Date 2019/7/2 17:15 */ 方法注释模板： /** * @Author 4005517 * @Description //TODO * @Date 2019/7/2 17:21 * @Param [obj] * @return boolean */ 一、首先我们来设置IDEA中类的模板：（IDEA中在创建类时会自动给添加注释） 1、File-->settings-->Editor-->File and Code Templates-->Files 我们选择Class文件（当然你要设置接口的还也可以选择Interface文件） （1）${NAME}：设置类名，与下面的${NAME}一样才能获取到创建的类名 （2）TODO：代办事项的标记，一般生成类或方法都需要添加描述 （3）${USER}、${DATE}、${TIME}：设置创建类的用户、创建的日期和时间，这些事IDEA内置的方法，还有一些其他的方法在绿色框标注的位置，比如你想添加项目名则可以使用${PROJECT_NAME} （4）1.0：设置版本号，一般新创建的类都是1.0版本，这里写死就可以了 2、效果图展示 二、设置方法注释模板 IDEA还没有智能到自动为我们创建方法注释，这就是要我们手动为方法添加注释，使用Eclipse时我们生成注释的习惯是 /**+Enter，这里我们也按照这种习惯来设置IDEA的方法注释 1、File-->Settings-->Editor-->Live Templates (1）新建组：命名为userDefine （2）新建模板：命名为add 因为IDEA生成注释的默认方式是：/*+模板名+快捷键（比如若设置模板名为add快捷键用Tab，则生成方式为 /*add+Tab），如果不采用这样的生成方式IDEA中没有内容的方法将不可用，例如获取方法参数的methodParameters(）、 获取方法返回值的methodReturnType(） （3）设置生成注释的快捷键 （4）设置模板：模板内容如下 注意第一行，只有一个而不是/ 在设置参数名时必须用${参数名}$的方式，否则第五步中读取不到你设置的参数名 * * @Author 4005517 * @Description //TODO $end$ * @Date $date$ $time$ * @Param $param$ * @return $return$ */ 生成的模板注释将会是如下效果：所以我们要去掉最前面的/* （5）设置模板的应用场景 点击模板页面最下方的警告，来设置将模板应用于那些场景，一般选择EveryWhere-->Java即可 （如果曾经修改过，则显示为change而不是define） （6）设置参数的获取方式 选择右侧的Edit variables按钮 PS:第五步和第六步顺序不可颠倒，否则第六步将获取不到方法 选择每个参数对应的获取方法（在下拉选择框中选择即可），网上有很多教程说获取param时使用脚本的方式，我试过使用脚本的方式不仅麻烦而且只能在方法内部使用注释时才能获取到参数 （7）效果图 创建方法，在方法上面写：/*+模板名(add)+Enter /** * @Author 4005517 * @Description //TODO * @Date 2019/7/2 17:45 * @Param [loginName, passWord] * @return java.lang.String */ public String test(String loginName,String passWord){ return \"test hello\"; } Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Linux/虚拟机安装.html":{"url":"source/Linux/虚拟机安装.html","title":"虚拟机安装","keywords":"","body":"分布式专题需要搭建虚拟机，大家可以按照以下步骤去安装自己的虚拟机 VMware Workstation14安装CentOS7.0 详情教程 1. 上课环境： vmware workstation + centos7.0 +jdk1.8 +IntelliJ IDEA 2.vmware下载地址：传送门) 3.centos7.0下载地址：http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Everything-1804.iso 4.vmware+centos7安装图文教程： http://blog.csdn.net/alex_my/article/details/38142229 5.centos7.0已经做好的镜像：下载地址：传送门](https://pan.baidu.com/disk/home#/all?vmode=list&path=%2F%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA) root和其他账户的密码:tanfeng112 其他软件xshell、xftp ：直接百度搜索第一个就是下载地址 1.准备工作 a)下载VMware workstation14 b)下载CentOS7 c)下载SSH Secure Shell Client 2.虚拟机配置 a)打开虚拟机软件“VMware Workstation”，选择“创建新的虚拟机” b)选择“典型”选项，点击“下一步” c)选择“稍后安装操作系统”，点击“下一步” d)客户机操作选择“Linux”,版本选择“CentOS 7 64位”，点击“下一步” 　e)输入“虚拟机名称”；点击“浏览”按钮，选择虚拟机文件保存的位置；点击“下一步 f)默认设置，选择“下一步” g)自定义硬件配置 h)选择“新CD/DVD”, 选择“使用ISO镜像文件”，然后点击“浏览”，找到刚才下载的centOS7镜像文件，然后点击下面的确定 i)点击“完成” 3.安装centOs7 a)开启虚拟机 b)如果出现下图的错误，需要到BIOS中设置（百度搜索一大堆解决方案） c)选择语言“中文-简体中文” d)接下来显示“安装信息摘要”页面； 点击其中的每一项进行设置，也可以使用默认设置； 软件选择：决定了系统安装后包括哪些功能，如果使用默认值，那么系统安装后是没有图形界面的；选择“GNOME 桌面”，会显示图形界面；本着学习的目的，这里选择默认设置“最小安装”；如果怕麻烦，直接选择GNOME桌面 e)安装目标位置：自动配置分区 f)网络和主机名：打开连接开关，记住IP地址，SSH登录时使用，设置主机名，点击“应用”生效 g)开始安装 h)设置ROOT密码 i)安装 j)按照成功后，进行登录 Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Linux/zookeeper.html":{"url":"source/Linux/zookeeper.html","title":"zookeeper","keywords":"","body":"Zookeeper 安装 在安装ZooKeeper之前，请确保你的系统是在以下任一操作系统上运行： **任意Linux OS** - 支持开发和部署。适合演示应用程序。 **Windows OS** - 仅支持开发。 **Mac OS** - 仅支持开发。 ZooKeeper服务器是用Java创建的，它在JVM上运行。你需要使用JDK 6或更高版本。 现在，按照以下步骤在你的机器上安装ZooKeeper框架。 步骤1：验证Java安装 相信你已经在系统上安装了Java环境。现在只需使用以下命令验证它。 $ java -version 如果你在机器上安装了Java，那么可以看到已安装的Java的版本。否则，请按照以下简单步骤安装最新版本的Java。 步骤1.1：下载JDK 通过访问链接下载最新版本的JDK，并下载最新版本的Java。 最新版本（在编写本教程时）是JDK 8u 60，文件是“jdk-8u60-linuxx64.tar.gz\"。请在你的机器上下载该文件。 步骤1.2：提取文件 通常，文件会下载到download文件夹中。验证并使用以下命令提取tar设置。 $ cd /go/to/download/path $ tar -zxf jdk-8u60-linux-x64.gz 步骤1.3：移动到opt目录 要使Java对所有用户可用，请将提取的Java内容移动到“/usr/local/java\"文件夹。 $ su password: (type password of root user) $ mkdir /opt/jdk $ mv jdk-1.8.0_60 /opt/jdk/ 步骤1.4：设置路径 要设置路径和JAVA_HOME变量，请将以下命令添加到〜/.bashrc文件中。 export JAVA_HOME = /usr/jdk/jdk-1.8.0_60 export PATH=$PATH:$JAVA_HOME/bin 现在，将所有更改应用到当前运行的系统中。 $ source ~/.bashrc 步骤1.5：Java替代 使用以下命令更改Java替代项。 update-alternatives --install /usr/bin/java java /opt/jdk/jdk1.8.0_60/bin/java 100 步骤1.6 使用步骤1中说明的验证命令(java -version)验证Java安装。 步骤2：ZooKeeper框架安装 步骤2.1：下载ZooKeeper 要在你的计算机上安装ZooKeeper框架，请访问以下链接并下载最新版本的ZooKeeper。http://zookeeper.apache.org/releases.html 到目前为止，最新版本的ZooKeeper是3.4.6(ZooKeeper-3.4.6.tar.gz)。 步骤2.2：提取tar文件 使用以下命令提取tar文件 $ cd opt/ $ tar -zxf zookeeper-3.4.6.tar.gz $ cd zookeeper-3.4.6 $ mkdir data 步骤2.3：创建配置文件 使用命令 vi conf/zoo.cfg 和所有以下参数设置为起点，打开名为 conf/zoo.cfg 的配置文件。 $ vi conf/zoo.cfg tickTime = 2000 dataDir = /path/to/zookeeper/data clientPort = 2181 initLimit = 5 syncLimit = 2 一旦成功保存配置文件，再次返回终端。你现在可以启动zookeeper服务器。 步骤2.4：启动ZooKeeper服务器 执行以下命令 $ bin/zkServer.sh start 执行此命令后，你将收到以下响应 $ JMX enabled by default $ Using config: /Users/../zookeeper-3.4.6/bin/../conf/zoo.cfg $ Starting zookeeper ... STARTED 步骤2.5：启动CLI 键入以下命令 $ bin/zkCli.sh 键入上述命令后，将连接到ZooKeeper服务器，你应该得到以下响应。 Connecting to localhost:2181 ................ ................ ................ Welcome to ZooKeeper! ................ ................ WATCHER:: WatchedEvent state:SyncConnected type: None path:null [zk: localhost:2181(CONNECTED) 0] 停止ZooKeeper服务器 连接服务器并执行所有操作后，可以使用以下命令停止zookeeper服务器。 $ bin/zkServer.sh stop 客户端连接报错如下： Opening socket connection to server localhost.dolojia/192.168.112.131:2181. Will not attempt to authenticate using SASL (unknown error) 是因为防火墙的原因 在CentOS 7或RHEL 7中防火墙由firewalld来管理 firewall-cmd --zone=public --add-port=8088/tcp --permanent #（--permanent永久生效，没有此参数重启后失效） firewall-cmd --zone=public --remove-port=80/tcp --permanent #删除 systemctl start firewalld.service #查看防火墙状态 systemctl stop firewalld.service #完全关闭防火墙 firewall-cmd --permanent --zone=public --add-port=2181/tcp #打开2181端口 `` Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Linux/Linux安装redis.html":{"url":"source/Linux/Linux安装redis.html","title":"Linux安装redis","keywords":"","body":"Linux下安装redis 一下载 下载地址：http://redis.io/download，下载最新稳定版本。 $ wget http://download.redis.io/releases/redis-5.0.5.tar.gz $ tar xzf redis-5.0.5.tar.gz $ cd redis-5.0.5 $ make 二运行 $ cd src/ $ src/redis-server 三验证 [root@iz2ze0zcgmybh1wlebrk0mz src]# cd /usr/local/redis-5.0.5/src/ [root@iz2ze0zcgmybh1wlebrk0mz src]# ./redis-cli 127.0.0.1:6379> set test 20 OK Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Linux/Linux安装Elasticsearch.html":{"url":"source/Linux/Linux安装Elasticsearch.html","title":"Linux安装Elasticsearch","keywords":"","body":"Linux安装Elasticsearch 　下载安装包 官网下载地址https://www.elastic.co/cn/downloads/elasticsearch 解压安装包 tar -zxvf elasticsearch-7.3.1-linux-x86_64.tar.gz 修改 config 目录下的 elasticsearch.yml 文件 // 去掉行开头的 # 并重命名集群名，这里命名为 compass cluster.name: compass // 去掉行开头的 # 并重命名节点名，这里命名为 node-1 node.name: node-1 启动ES： 版本> = 5.0.0 时，是不能用超级管理员运行的，此时需要切换到普通账号或者新建 ES 账号 [root@localhost elasticsearch-7.3.1]# sh bin/elasticsearch OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release. [2019-08-29T10:11:09,644][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [localhost.dolojia] uncaught exception in thread [main] org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:163) ~[elasticsearch-7.3.1.jar:7.3.1] at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:150) ~[elasticsearch-7.3.1.jar:7.3.1] at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[elasticsearch-7.3.1.jar:7.3.1] at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[elasticsearch-cli-7.3.1.jar:7.3.1] at org.elasticsearch.cli.Command.main(Command.java:90) ~[elasticsearch-cli-7.3.1.jar:7.3.1] at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:115) ~[elasticsearch-7.3.1.jar:7.3.1] at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92) ~[elasticsearch-7.3.1.jar:7.3.1] Caused by: java.lang.RuntimeException: can not run elasticsearch as root at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:105) ~[elasticsearch-7.3.1.jar:7.3.1] at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:172) ~[elasticsearch-7.3.1.jar:7.3.1] at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:349) ~[elasticsearch-7.3.1.jar:7.3.1] at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:159) ~[elasticsearch-7.3.1.jar:7.3.1] ... 6 more 创建es专属用户启动 ① 新建用户组 elasticsearch $ groupadd elasticsearch ② 新建用户并指定用户组 $ useradd -g elasticsearch elasticsearch ③ 修改 ES 目录所属者 $ chown -R elasticsearch:elasticsearch elasticsearch ④ 切换用户后再次启动 $ su elasticsearch 只能使用127.0.01或者localhost访问，使用ip地址无法访问 #修改 elasticsearch.yml 中的「network.host」 network.host: 0.0.0.0 验证是否启动成功 [root@localhost opt]# curl http://localhost:9200 { \"name\" : \"localhost.dolojia\", \"cluster_name\" : \"elasticsearch\", \"cluster_uuid\" : \"wJIrmAaDRu--MfaRHtr70w\", \"version\" : { \"number\" : \"7.3.1\", \"build_flavor\" : \"default\", \"build_type\" : \"tar\", \"build_hash\" : \"4749ba6\", \"build_date\" : \"2019-08-19T20:19:25.651794Z\", \"build_snapshot\" : false, \"lucene_version\" : \"8.1.0\", \"minimum_wire_compatibility_version\" : \"6.8.0\", \"minimum_index_compatibility_version\" : \"6.0.0-beta1\" }, \"tagline\" : \"You Know, for Search\" } Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Linux/Linux下java环境搭建.html":{"url":"source/Linux/Linux下java环境搭建.html","title":"Linux下java环境搭建","keywords":"","body":"Linux下java环境搭建 rpm方式安装JDK 1.下载JDK 下载地址 在usr/local下新建目录Java [root@iz2ze0zcgmybh1wlebrk0mz local]# mkdir java 将下载好的jdk-7u71-linux-x64.rpm文件拷贝到 Java目录中 上传完后的文件如下，文件只有读写权限，没有执行权限 使用如下命令授权，如果文件已经有了执行权限，此步骤可省略 # chmod 755 jdk-7u71-linux-x64.rpm 2.安装JDK 执行如下命令安装jdk # rpm -ivh jdk-7u71-linux-x64.rpm 如果在安装时出现如下错误 warning:waiting for transaction lock on /var/lib/rpm/.rpm.lock 使用如下命令来进行安装 # sudo rpm -ivh jdk-7u71-linux-x64.rpm 如果仍然不可以，使用如下命令强制解锁后再次安装即可 # sudo rm /var/lib/rpm/.rpm.lock 3.配置环境变量 使用 vim 编辑器打开文件/etc/profile # vim /etc/profile 在文件尾部添加如下内容，保存退出 export JAVA_HOME=/usr/java/jdk1.7.0_71 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tool.jar 此时，我们刚刚配置的环境变量并没有起效，输入如下命令，使用环境变量立即生效 # source /etc/profile 输入如下命令验证环境变量是否生效 # echo $PATH 输入如下命令查看jdk版本 # java -version openjdk version \"1.8.0_181\" OpenJDK Runtime Environment (build 1.8.0_181-b13) OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode) yum安装JDK 1.检查系统原版并卸载 输入如下命令查看系统已安装的jdk # rpm -qa | grep java # rpm -qa | grep jdk 如果已经安装了jdk，使用如下命令卸载，yum会自动检测，卸载删除jdk的相关安装包 # yum -y remove java* # yum -y remove jdk* 2.jdk安装 查看java相关列表（jdk版本信息），笔者选择安装的是openjdk1.8 # yum list | grep jdk 3.使用如下命令安装jdk # yum -y install java-1.8.0-openjdk.x86_64 4. 等待安装完成，验证版本 # java -version openjdk version \"1.8.0_181\" OpenJDK Runtime Environment (build 1.8.0_181-b13) OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode) Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Linux/Linux下检测tomcat是否存活并重启.html":{"url":"source/Linux/Linux下检测tomcat是否存活并重启.html","title":"Linux下检测tomcat是否存活并重启","keywords":"","body":"Linux下检测tomcat是否存活并重启 1. 编写tomcat检测存活重启脚本 只检测进程是否存在脚本 #!/bin/sh # function:自动监控tomcat进程，挂了就执行重启操作 #tomcat文件名称 TOMCAT_NAME=xxxxx #tomcat部署路径 TOMCAT_HOME=/home/local/tomcat # 日志输出 TOMCAT_MONITOR_LOG=/usr/local/shell/tomcatMonitor.log # 获取tomcat PPID TOMCAT_ID=$(ps -ef |grep tomcat |grep -w $TOMCAT_NAME|grep -v 'grep'|awk '{print $2}') # tomcat_startup START_TOMCAT=$TOMCAT_HOME/$TOMCAT_NAME/bin/startup.sh Monitor() { echo \"[info]开始监控tomcat...[$(date +'%F %H:%M:%S')]\" if [ $TOMCAT_ID ];then echo \"[info]$TOMCAT_NAME进程ID为:$TOMCAT_ID.\" echo \"$TOMCAT_NAME 状态正常... ending.\" else echo \"[error]进程不存在!$TOMCAT_NAME自动重启...\" echo \"[info]$START_TOMCAT,请稍候......\" $START_TOMCAT fi echo \"------------------------------\" } Monitor>>$TOMCAT_MONITOR_LOG 带url状态检测脚本 #!/bin/sh # function:自动监控tomcat进程，挂了就执行重启操作 #tomcat文件名称 TOMCAT_NAME=xxxxx #tomcat部署路径 TOMCAT_HOME=/home/local/tomcat #定义要监控的页面地址（写比较简单页面即可） WEB_URL=http://localhost:8080/xxxx/ # 日志输出 TOMCAT_MONITOR_LOG=/home/local/shell/tomcatMonitor.log # tomcat_startup START_TOMCAT=$TOMCAT_HOME/$TOMCAT_NAME/bin/startup.sh # 获取tomcat PPID TOMCAT_ID=$(ps -ef |grep tomcat |grep -w $TOMCAT_NAME|grep -v 'grep'|awk '{print $2}') # curl 日志-o /dev/null 屏蔽原有输出信息 CURL_MONITOR_LOG=/dev/null Monitor() { echo \"[info]开始监控$TOMCAT_NAME...[$(date +'%F %H:%M:%S')]\" #判断Tomcat进程是否存在 if [ $TOMCAT_ID ];then echo \"[info]$TOMCAT_NAME进程ID为:$TOMCAT_ID.继续检测......\" #检测是否启动成功（成功的话页面会返回状态\"200\"） TomcatServiceCode=$(curl -I -m 10 -o $CURL_MONITOR_LOG -s -w %{http_code} $WEB_URL) if [ $TomcatServiceCode -eq 200 ];then echo \"[info] curl $WEB_URL返回码为$TomcatServiceCode.\" echo \"$TOMCAT_NAME 状态正常... ending.\" else echo \"[error]$TOMCAT_NAME出错，请注意..状态码为$TomcatServiceCode，开始重启$TOMCAT_NAME...\" #杀掉原tomcat进程 kill -9 $TOMCAT_ID sleep 3 $START_TOMCAT fi else echo \"[error]进程不存在!$TOMCAT_NAME自动重启...\" echo \"[info]$START_TOMCAT,请稍候......\" $START_TOMCAT fi echo \"------------------------------\" } Monitor>>$TOMCAT_MONITOR_LOG 2. 对该脚本赋予执行权限 赋执行权限 [root@IDCWX05 shell]# chmod -R 777 tomcat-monitor.sh 3. 修改定时任务启动器 查看定时任务列表 [root@IDCWX05 shell]# crontab -l 05 09 * * * /usr/local/shell/time/build-dos2unix.sh */5 * * * * /usr/local/shell/tomcat-monitor.sh 编辑定时任务启动器 [root@IDCWX05 shell]# crontab -e 在打开的脚本页输入（每5分钟执行一次） */5 * * * * /usr/local/shell/tomcat-monitor.sh 正常保存退出即可生效 查看crontab状态 [root@IDCWX05 shell]# tail -f /var/log/cron Sep 10 20:19:57 IDCWX05 crontab[21591]: (root) LIST (root) Sep 10 20:20:01 IDCWX05 CROND[21599]: (root) CMD (/usr/local/shell/check_tomcat_live.sh) Sep 10 20:20:01 IDCWX05 CROND[21600]: (root) CMD (/usr/lib64/sa/sa1 1 1) Sep 10 20:21:01 IDCWX05 crontab[21616]: (root) BEGIN EDIT (root) Sep 10 20:21:02 IDCWX05 crontab[21616]: (root) END EDIT (root) Sep 10 20:25:01 IDCWX05 CROND[21627]: (root) CMD (/usr/local/shell/check_tomcat_live.sh) Sep 10 20:30:01 IDCWX05 CROND[21692]: (root) CMD (/usr/lib64/sa/sa1 1 1) Sep 10 20:30:01 IDCWX05 CROND[21693]: (root) CMD (/usr/local/shell/check_tomcat_live.sh) Sep 10 20:35:02 IDCWX05 CROND[21755]: (root) CMD (/usr/local/shell/check_tomcat_live.sh) Sep 10 20:35:32 IDCWX05 crontab[21766]: (root) LIST (root) ​ Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Linux/mongodb安装.html":{"url":"source/Linux/mongodb安装.html","title":"mongodb安装","keywords":"","body":"安装MongoDB Configure the package management system (yum) Create a /etc/yum.repos.d/mongodb-org-4.0.repo file so that you can install MongoDB directly using yum: [mongodb-org-4.0] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/ gpgcheck=1 enabled=1 gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc Install the MongoDB packages. 安装MongoDB的最新的稳定版本,发出以下命令 sudo yum install -y mongodb-org 安装MongoDB的特定版本,指定每个组件分别包和包名称添加版本号,如以下示例 sudo yum install -y mongodb-org-4.0.2 mongodb-org-server-4.0.2 mongodb-org-shell-4.0.2 mongodb-org-mongos-4.0.2 mongodb-org-tools-4.0.2 出现错误：curl: (35) SSL connect error 原因：nss版本太旧，升级解决 [root@IDCWX16 mongodb]# yum -y update nss Run MongoDB Community Edition（运行MongoDB社区版 ） Start MongoDB： sudo service mongod start Stop MongoDB： sudo service mongod stop Restart MongoDB sudo service mongod restart Begin using MongoDB mongo --host 127.0.0.1:27017 Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Linux/mysql安装.html":{"url":"source/Linux/mysql安装.html","title":"mysql安装","keywords":"","body":"mysql安装 cd /usr/local/ wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz ll -t 查看已经下载好了安装包mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz 解压 tar -zxvf mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz 复制 cp -r mysql-5.7.22-linux-glibc2.12-x86_64 /usr/local/mysql 2、添加系统mysql组和mysql用户 添加系统mysql组 groupadd mysql 添加mysql用户 useradd -r -g** mysql mysql **（添加完成后可用id mysql查看） 安装数据库 修改当前目录拥有者为mysql用户 chown -R mysql:mysql ./ bin/mysqld --initialize --user=root --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data 如果出现错误: ./bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory 请执行 yum install -y libaio 后再执行上面命令 成功后输出如下内容,生成了临时密码(Zy=lxsEkr0gM) ```2018-08-27T12:05:38.545487Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details). 2018-08-27T12:05:38.545487Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details). 2018-08-27T12:05:39.600635Z 0 [Warning] InnoDB: New log files created, LSN=45790 2018-08-27T12:05:39.722897Z 0 [Warning] InnoDB: Creating foreign key constraint system tables. 2018-08-27T12:05:39.786218Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 83c6e27b-a9f1-11e8-873a-00163e0caf40. 2018-08-27T12:05:39.788230Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened. 2018-08-27T12:05:39.788701Z 1 [Note] A temporary password is generated for root@localhost: Zy=lxsEkr0gM 配置my.cnf **vim /etc/my.cnf ** 写入如下内容 ``` [mysqld] character_set_server=utf8 init_connect='SET NAMES utf8' basedir=/usr/local/mysql datadir=/usr/local/mysql/data socket=/tmp/mysql.sock 不区分大小写 (sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 这个简单来说就是sql语句是否严格) lower_case_table_names = 1 log-error=/var/log/mysqld.log #chown -R mysql:mysql /var/log/ 需要给他赋mysql权限 pid-file=/usr/local/mysql/data/mysqld.pid 添加开机启动 `cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld ` 修改 vim /etc/init.d/mysqld ``` shell vim /etc/init.d/mysqld basedir=/usr/local/mysql datadir=/usr/local/mysql/data ``` 启动mysql ``` shell service mysql start ``` 登录修改密码 mysql -uroot -p 上面初始化时的密码 **如果出现错误 需要添加软连接 ln -s /usr/local/mysql/bin/mysql /usr/bin** ```shell alter user 'root'@'localhost' identified by 'root'; flush privileges; #刷新权限 GRANT ALL PRIVILEGES ON *.* TO 'root1'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION; #授权新用户root1 ``` 使用客户端连接mysql,出现如下错误, 远程权限问题。 出现“服务器连接错误Host 'XXX' is not allowed to connect to this MySQL server”的错误,看上面设置权限 ```` Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Linux/安装RabbitMQ.html":{"url":"source/Linux/安装RabbitMQ.html","title":"安装RabbitMQ","keywords":"","body":"安装RabbitMQ 安装erlang（通过yum源来安装） 因为RabbitMQ是由erlang实现的，所以要先安装erlang再安装rabbitMQ 下载命令： [root@iz2ze0zcgmybh1wlebrk0mz local]# wget http://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm 加入yum源： [root@iz2ze0zcgmybh1wlebrk0mz local]# rpm -Uvh erlang-solutions-1.0-1.noarch.rpm 开始安装： [root@iz2ze0zcgmybh1wlebrk0mz local]# yum install erlang 安装rabbitmq 下载地址命令： [root@iz2ze0zcgmybh1wlebrk0mz local]# wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.15/rabbitmq-server-3.6.15-1.el6.noarch.rpm 安装命令： [root@iz2ze0zcgmybh1wlebrk0mz local]# yum install rabbitmq-server-3.6.15-1.el6.rpm 配置rabbitmq 先查看服务状态 [root@iz2ze0zcgmybh1wlebrk0mz ebin]# systemctl status rabbitmq-server.service ● rabbitmq-server.service - LSB: Enable AMQP service provided by RabbitMQ broker Loaded: loaded (/etc/rc.d/init.d/rabbitmq-server; bad; vendor preset: disabled) Active: active (running) since Tue 2018-08-28 17:46:50 CST; 48min ago Docs: man:systemd-sysv-generator(8) Process: 4672 ExecStop=/etc/rc.d/init.d/rabbitmq-server stop (code=exited, status=0/SUCCESS) Process: 5036 ExecStart=/etc/rc.d/init.d/rabbitmq-server start (code=exited, status=0/SUCCESS) CGroup: /system.slice/rabbitmq-server.service ├─5252 /bin/sh /etc/rc.d/init.d/rabbitmq-server start ├─5259 /bin/bash -c ulimit -S -c 0 >/dev/null 2>&1 ; /usr/sbin/rabbitmq-server └─5261 /bin/sh /usr/sbin/rabbitmq-server Aug 28 17:46:46 iz2ze0zcgmybh1wlebrk0mz systemd[1]: Starting LSB: Enable AMQP service provided by RabbitMQ broker... Aug 28 17:46:46 iz2ze0zcgmybh1wlebrk0mz su[5128]: (to rabbitmq) root on none Aug 28 17:46:46 iz2ze0zcgmybh1wlebrk0mz su[5278]: (to rabbitmq) root on none Aug 28 17:46:46 iz2ze0zcgmybh1wlebrk0mz su[5279]: (to rabbitmq) root on none Aug 28 17:46:50 iz2ze0zcgmybh1wlebrk0mz rabbitmq-server[5036]: Starting rabbitmq-server: SUCCESS Aug 28 17:46:50 iz2ze0zcgmybh1wlebrk0mz rabbitmq-server[5036]: rabbitmq-server. Aug 28 17:46:50 iz2ze0zcgmybh1wlebrk0mz systemd[1]: Started LSB: Enable AMQP service provided by RabbitMQ broker. 启动服务 [root@iz2ze0zcgmybh1wlebrk0mz local]# service rabbitmq-server start Starting rabbitmq-server (via systemctl): [ OK ] 或者 [root@iz2ze0zcgmybh1wlebrk0mz local]# /sbin/service rabbitmq-server start 配置可视化管理界面 安装插件 [root@iz2ze0zcgmybh1wlebrk0mz local]# /sbin/rabbitmq-plugins enable rabbitmq_management 重启服务 [root@iz2ze0zcgmybh1wlebrk0mz local]# service rabbitmq-server restart 通过http://ip:15672 使用默认账号密码guest,guest登陆web页面 登录出现错误User can only log in via localhost 原因 rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问 解决方案 1. 找到/rabbitmq_server-3.6.14/ebin下面的rabbit.app文件 2. 将loopback_users里的>删除 结果：[{rabbit, [{loopback_users, []}]}]. 3. 重启服务 systemctl restart rabbitmq-server.service 用户管理 查看当前用户 [root@iz2ze0zcgmybh1wlebrk0mz ebin]# rabbitmqctl list_users Listing users admin [administrator] guest [administrator] 创建用户： [root@iz2ze0zcgmybh1wlebrk0mz local]# rabbitmqctl add_user admin 123456 赋予管理员权限 [root@iz2ze0zcgmybh1wlebrk0mz local]# rabbitmqctl set_user_tags admin administrator 或者直接在web管理界面创建用户并赋权限 Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Nginx/openReaty安装.html":{"url":"source/Nginx/openReaty安装.html","title":"openReaty安装","keywords":"","body":"openReaty安装 使用yum安装以下的开发库: yum install pcre-devel openssl-devel gcc curl ​ 在你的 CentOS 系统中添加 openresty 仓库，便于未来安装或更新，（通过 yum update 命令） sudo yum install yum-utils sudo yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo ​ 然后就可以像下面这样安装软件包，比如 openresty： sudo yum install openresty 启动nginx 验证是否成功 curl http://localhost:80/ ​ ​ grant all PRIVILEGES on db_name.* to 'mysql'@'%' identified by 'mysql123' WITH GRANT OPTION; Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Tomcat/tomcat配置详解.html":{"url":"source/Tomcat/tomcat配置详解.html","title":"tomcat配置详解","keywords":"","body":"tomcat中server.xml配置详解 元素结构 ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ 元素节点介绍 元素名 属性 解释 server port 指定一个端口，这个端口负责监听关闭tomcat的请求 shutdown 指定向端口发送的命令字符串 service name 指定service的名字 Connector(表示客户端和service之间的连接) port 指定服务器端要创建的端口号，并在这个断口监听来自客户端的请求 minProcessors 服务器启动时创建的处理请求的线程数 maxProcessors 最大可以创建的处理请求的线程数 minSpareThreads 该Connector先创建5个线程等待客户请求，每个请求由一个线程负责 maxSpareThread 设定在监听端口的线程的最大数目,这个值也决定了服务器可以同时响应客户请求的最大数目.默认值为200 enableLookups 如果为true，则可以通过调用request.getRemoteHost()进行DNS查询来得到远程客户端的实际主机名，若为false则不进行DNS查询，而是返回其ip地址 redirectPort 指定服务器正在处理http请求时收到了一个SSL传输请求后重定向的端口号 acceptCount 指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理 connectionTimeout 指定超时的时间数(以毫秒为单位) Engine(表示指定service中的请求处理机，接收和处理来自Connector的请求) defaultHost 指定缺省的处理请求的主机名，它至少与其中的一个host元素的name属性值是一样的 Context(表示一个web应用程序，通常为WAR文件，关于WAR的具体信息见servlet规范) docBase 应用程序的路径或者是WAR文件存放的路径 path 表示此web应用程序的url的前缀，这样请求的url为http://localhost:8080/path/**** reloadable 这个属性非常重要，如果为true，则tomcat会自动检测应用程序的/WEB-INF/lib 和/WEB-INF/classes目录的变化，自动装载新的应用程序，我们可以在不重起tomcat的情况下改变应用程序 host(表示一个虚拟主机) name 指定主机名 appBase 应用程序基本目录，即存放应用程序的目录 unpackWARs 如果为true，则tomcat会自动将WAR文件解压，否则不解压，直接从WAR文件中运行应用程序 Logger(表示日志，调试和错误信息) className 指定logger使用的类名，此类必须实现org.apache.catalina.Logger 接口 prefix 指定log文件的前缀 suffix 指定log文件的后缀 timestamp 如果为true，则log文件名中要加入时间，如下例:localhost_log.001-10-04.txt Realm(表示存放用户名，密码及role的数据库) className 指定Realm使用的类名，此类必须实现org.apache.catalina.Realm接口 Valve(功能与Logger差不多，其prefix和suffix属性解释和Logger 中的一样) className 指定Valve使用的类名，如用org.apache.catalina.valves.AccessLogValve类可以记录应用程序的访问信息 directory 指定log文件存放的位置 pattern 有两个值，common方式记录远程主机名或ip地址，用户名，日期，第一行请求的字符串，HTTP响应代码，发送的字节数。combined方式比common方式记录的值更多 下载地址 在usr/local下新建目录Java [root@iz2ze0zcgmybh1wlebrk0mz local]# mkdir java 将下载好的jdk-7u71-linux-x64.rpm文件拷贝到 Java目录中 上传完后的文件如下，文件只有读写权限，没有执行权限 使用如下命令授权，如果文件已经有了执行权限，此步骤可省略 # chmod 755 jdk-7u71-linux-x64.rpm 2.安装JDK 执行如下命令安装jdk # rpm -ivh jdk-7u71-linux-x64.rpm 如果在安装时出现如下错误 warning:waiting for transaction lock on /var/lib/rpm/.rpm.lock 使用如下命令来进行安装 # sudo rpm -ivh jdk-7u71-linux-x64.rpm 如果仍然不可以，使用如下命令强制解锁后再次安装即可 # sudo rm /var/lib/rpm/.rpm.lock 3.配置环境变量 使用 vim 编辑器打开文件/etc/profile # vim /etc/profile 在文件尾部添加如下内容，保存退出 export JAVA_HOME=/usr/java/jdk1.7.0_71 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tool.jar 此时，我们刚刚配置的环境变量并没有起效，输入如下命令，使用环境变量立即生效 # source /etc/profile 输入如下命令验证环境变量是否生效 # echo $PATH 输入如下命令查看jdk版本 # java -version openjdk version \"1.8.0_181\" OpenJDK Runtime Environment (build 1.8.0_181-b13) OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode) yum安装JDK 1.检查系统原版并卸载 输入如下命令查看系统已安装的jdk # rpm -qa | grep java # rpm -qa | grep jdk 如果已经安装了jdk，使用如下命令卸载，yum会自动检测，卸载删除jdk的相关安装包 # yum -y remove java* # yum -y remove jdk* 2.jdk安装 查看java相关列表（jdk版本信息），笔者选择安装的是openjdk1.8 # yum list | grep jdk 3.使用如下命令安装jdk # yum -y install java-1.8.0-openjdk.x86_64 4. 等待安装完成，验证版本 # java -version openjdk version \"1.8.0_181\" OpenJDK Runtime Environment (build 1.8.0_181-b13) OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode) Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/持续集成/Jenkins搭建文档.html":{"url":"source/持续集成/Jenkins搭建文档.html","title":"Jenkins搭建文档","keywords":"","body":"Jenkins部署 准备Jenkins版本 （jenkins-2.32.3-1.1.noarch.rpm） 执行安装：rpm -ih jenkins-2.32.3-1.1.noarch.rpm 成功如下： 自动安装完成之后 /usr/lib/jenkins/jenkins.war WAR包 vim /etc/sysconfig/jenkins 配置文件 修改端口为9001 /var/lib/jenkins/ 默认的JENKINS_HOME目录 /var/log/jenkins/jenkins.log Jenkins日志文件 /var/lib/jenkins/secrets/initialAdminPassword 首次登陆密码 安装完成之后启动jenkins service jenkins start 跳过插件安装，待后续 设置用户名密码 admin df123456 131 admin Sz123456 安装插件 Deploy to Container Plugin （这个是支持将代码部署到tomcat容器的） GIT plugin Maven Integration plugin maven 项目 Git Parameter 参数化构建git项目，可选分支或tag构建（可用于定义备份tag，失败时回滚） 设置jdk、maven、git Global Tool Configuration Maven Configuration 默认 安装JDK 安装maven Git 安装 创建maven项目 Git 源码设置(chmod -R 777 /var/lib/jenkins) 设置git key免密登录 cp ~/.ssh/id_rsa /var/lib/jenkins/.ssh/ cp ~/.ssh/id_rsa.pub /var/lib/jenkins/.ssh/ //或者Cp ssh to /var/lib/jenkins/.ssh 设置权限 chown jenkins id_rsa.pub chown jenkins id_rsa chmod 400 id_rsa 如果构建报错权限问题 修改Jenkins用户权限为root vim /etc/passwd 修改后 jenkins:x:0:486:Jenkins Continuous Integration Server:/var/lib/jenkins:/bin/false 配置Tomcat user.xml文件 Jenkins执行远程Linux系统的shell命令 搜索并找到 SSH Slaves plugin 插件 删除 //服务 sudo apt-get remove jenkins //安装包，注意这里如果不是ubuntu那就yum sudo apt-get remove --auto-remove jenkins //配置和数据 sudo apt-get purge jenkins sudo apt-get purge --auto-remove jenkins Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "},"source/Blog/使用gitbook搭建博客.html":{"url":"source/Blog/使用gitbook搭建博客.html","title":"使用gitbook搭建博客","keywords":"","body":"使用gitbook搭建博客 一、 安装node 检查node是否安装成功 $ node -v v10.16.0 二、安装gitbook 安装命令 npm install gitbook-cli -g 初始化项目(新建文件) $ gitbook init warn: no summary file in this book info: create README.md info: create SUMMARY.md info: initialization is finished 启动服务，然后在浏览器地址栏中输入 http://localhost:4000 便可预览书籍 $ gitbook serve Starting server ... Serving book on http://localhost:4000 更多命令介绍 gitbook build #生成网页而不开启服务器 三、文件介绍 使用gitbook init后会自动生成两个文件README.md和SUMMARY.md README.md使用过git的都知道这个文件 SUMMARY.md就是自己要写文章章节目录 系统文件目录如下 发布后网页样式 四、通过配置文件来配置 在书籍下面都可以创建一个book.json { \"title\": \"标题\", \"author\": \"作者\", \"description\": \"简单描素\", \"language\": \"zh-hans\", \"gitbook\": \"3.2.3\", \"styles\": { \"website\": \"./styles/website.css\" }, \"structure\": { \"readme\": \"README.md\" }, \"links\": { \"sidebar\": { \"我的博客\": \"https://blog.csdn.net/kuangshp128\" } }, \"plugins\": [ \"-sharing\", \"splitter\", \"expandable-chapters-small\", \"anchors\", \"github\", \"github-buttons\", \"donate\", \"sharing-plus\", \"anchor-navigation-ex\", \"favicon\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/kuangshp/\" }, \"github-buttons\": { \"buttons\": [{ \"user\": \"kuangshp\", \"repo\": \"mysql\", \"type\": \"star\", \"size\": \"small\", \"count\": true }] }, \"donate\": { \"alipay\": \"./source/images/donate.png\", \"title\": \"\", \"button\": \"赞赏\", \"alipayText\": \" \" }, \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": false, \"hatenaBookmark\": false, \"instapaper\": false, \"line\": false, \"linkedin\": false, \"messenger\": false, \"pocket\": false, \"qq\": false, \"qzone\": false, \"stumbleupon\": false, \"twitter\": false, \"viber\": false, \"vk\": false, \"weibo\": false, \"whatsapp\": false, \"all\": [ \"google\", \"facebook\", \"weibo\", \"twitter\", \"qq\", \"qzone\", \"linkedin\", \"pocket\" ] }, \"anchor-navigation-ex\": { \"showLevel\": false }, \"favicon\": { \"shortcut\": \"./source/images/favicon.jpg\", \"bookmark\": \"./source/images/favicon.jpg\", \"appleTouch\": \"./source/images/apple-touch-icon.jpg\", \"appleTouchMore\": { \"120x120\": \"./source/images/apple-touch-icon.jpg\", \"180x180\": \"./source/images/apple-touch-icon.jpg\" } } } } 关于book.json字段的介绍 title: 书籍标题 author:书籍作者 description: 本书描述 language:语言(中文设置 \"zh-hans\" 即可) gitbook:gitbook的版本 styles:自定义样式 structure: readme文件的位置(指定 Readme、Summary、Glossary 和 Languages 对应的文件名) links:链接跳转{在左侧导航栏添加链接信息} plugins:插件 pluginsConfig:配置插件的属性 插件介绍 GitBook 有 插件官网，默认带有 5 个插件，highlight、search、sharing、font-settings、livereload，如果要去除自带的插件， 可以在插件名称前面加 -，比如： \"plugins\": [ \"-search\" ] 如果要配置使用的插件可以在 book.json 文件中加入即可，比如我们添加 plugin-github，我们在 book.json 中加入配置如下即可： { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/dolojia\" } } } 然后在终端输入 gitbook install ./ 即可。 如果要指定插件的版本可以使用 plugin@0.3.1，因为一些插件可能不会随着 GitBook 版本的升级而升级。 五、发布到github 在git上创建项目gitbook 将本地gitbook文件与GitHub上项目同步 gi$ git init $ git add . $ git commit -m \"first commit\" $ git remote add origin https://github.com/dolojia/gitboook.git $ git push -u origin master 在本地创建gh-pages分支 $ git checkout -b gh-pages $ git push $ git push --set-upstream origin gh-pages ​ 删除分支下文件，只保留_book/目录下文件的文件及.git文件夹，提交文件至gh-pages分支。 提交完成后到github仓库的设置中看一下，gh-pages服务是否自动开启，如果没有的话在Source中选择gh-pages branch，保存刷新，等待几分钟就好了 六、自动发发布脚本 以上操作过于繁杂，避免每次更新文件都要倒腾，写一个自动提交代码脚本自动同步代码至master跟gh-pages分支，创建文件push-gitbook.sh,内容如下： cd gitbook &&\\ git checkout master &&\\ gitbook init &&\\ gitbook build &&\\ git add . &&\\ git commit -m 'update gitbook' &&\\ git push origin master &&\\ git checkout gh-pages &&\\ rm -rf * &&\\ git checkout master -- _book &&\\ mv _book/* ./ &&\\ rm -rf _book &&\\ rm -rf publish.sh &&\\ git add . &&\\ git commit -m 'push-gitbook.sh gh-pages' &&\\ git push origin gh-pages &&\\ git checkout master 七、END 至此全部操作已经完成，接下来每次在本地更新书籍内容后，先生成静态页面，然后提交master分支，再提交、gh-pages分支就可以了。 最后通过下面地址访问线上内容： https://dolojia.github.io/gitbook Copyright © DoloJia 2019 all right reserved，powered by Gitbook修订时间： 2019-09-27 22:55:12 "}}